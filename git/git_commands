git: Distributed version control system and source code management tool.
git init ---> To initialize empty local repository

To provide your details:

git config --global user.name "bharathi"
git config --global user.email "bharathi@gmail.com"

In git, the code/file is moved in 3 stages:
1. workspace
2. staging/indexing
3. local repo

> By default all the files will be in workspace as untracked files.
> To check the status:
  git status

> To move the code to staging:
  git add <filename> (or) git add .
 
> To move the code to local repo:
  git commit -m "commit message" <filename> (or) git commit -m "commit message" 
      
> To get the logs or commit ID:
  git log

> To know what changes performed within a commit:
  git show <commit-ID>

> Sometimes when you try to push to remote repo, you get error saying "the remote has the data which is not present locally". It means that there might some other commits or push happened to the remote repo in the meantime. In such case, you can use:
  git pull --rebase

Branches:
> Branch is nothing but copy of data. As the name suggests, it will be a copy of data in the repository.

> By default, the default branch in local repo is "master" and the default branch in the remote or github repo is "main".

> Why we need branches?
  To isolate the data and secure the data. In general, the main branch will have production critical application code. It is not allowed to work or make changes to the main code since it might cause issue to the critical application code. Hence, we create branches in git. Also, different teams working on different fetaures or tasks. So, we maintain multiple feature branches. Once the feature branches are tested, these will be merged into main branch.

> Different types of branches are:
  Main branch
  Release branch
  Feature branch
  Hot fix branch

> To get the list of branches: git branch
> To create a new branch: git branch <br.name>  --> it will copy all the data from the current branch to the newly created branch.
> To move to a branch: git checkout <br.name>
> To create and checkout to a branch: git checkout -b <br.name>
> To merge 2 branches: git merge <br.name>  --> it will merge 2 branches. The content from the other branch will be copied to the current branch.
> To remove a branch: git branch -d <br.name>
> when you try to delete a branch before merging, it throws error. To delete the branches forcefully: 
   git brnach -D <br.name>
> To push a branch to the remote repo: 
   git push <git url> <br.name> (or) git push origin <br.name>.
   
   Here origin will point to the remote repo.

> To delete a branch in the remote repo:
   git push origin -d <br.name>
> Suppose you created a file in test branch but you have not moved the file to staging and you did checkout to other branch and changed the file contents and now when you commit the file, the file will be present in the current branch where you commit, but not in the branch where it was created.
> Generally merge happens automatically without any issues. But, When there are commits happening parallely in 2 different branches and now when you try merge these 2 branches, it will create a merge commit ID. It will open a editor and you need to provide a reason why you want to merge these 2 branches.
Merge conflict: 
when you try to merge 2 branches which have a file with same name but the contents are different. git is not sure which data to be committed.
In such situation, developers should discuss and finalize the code and commit it.

Git cherry-pick:
> Generally, git tracks the info on the commit IDs. Insted of merging 2 branches, if you want to merge a specific commit ID to your branch, use "git cherry-pick"
   git cherry-pick <commit_ID>
> when you clone a remote repository:
  To get the main branch: git branch
  To get remote branch: git branch -r
  To get all branches: git branch -a
> Sometimes, when the branch name and the file/folder name are same, the "git checkout" command throws error. Then use:
   git checkout <br.name> --
Pull request:
  Merge request and pull request are same. If the merge is done locally, its called merge request. When you merge in remote repo or in github, then its called pull request.
  In real time, you cannot merge 2 branches easily. You need to create a pull request and provide the description why you want to merge (like is it for a bug fix or enhancement) and then you need to add reviewers. Once it is approved you can merge. After the merge, you can also delete the branch if you do not require anymore.
git fork:
  In the open source git repos (like jenkins, k8s etc), you cannot directly make changes since you are not a contributor (do not have collaborator access to the repo) to the repo. Instead you can fork the complete repo (all branches or only main branch) and you can make your changes locally in your github forked repo. Then, you can create a pull request to merge 2 branches.

Filtering:
  To get the logs/ commit IDs:
    FILTERING:
      git log -n --> to get a particular number of commits.
      git log --oneline
      git log --oneline -n 
      git log --author kiran
      git log --since "06-03-2025"  --> date format "MM-DD-YYYY"

> To get all the globally set variables:
    git config --list
> To set global variables: git config --global user.name "name"

Alias : To create shortcuts to git commands.
-----
To view all the global variables set (like username, email, env variables, alias etc)
git status  ---> git s 


git config --global alias.s "status"
git config --global alias.s "status"
git s

git log
git config --global alias.l "log"
git l


git log --oneline
git config --global alias.lo "log --oneline"
git lO
 
======
To unset the alias:

git config --global --unset alias.s

==============================

amend:
Note: Only for the latest commit.
> To edit or add commit message.
> To append the current changes to the latest commit ID instead of creating a new commit ID.
-----
git commit --amend -m "label" -m "label2" -m "label3"

====================================
only for modified files :

git commit -am "messgae"

=======================================

revert: To revert or delete the changes happened in a particular commit. You can as well revert the changes back since it won't delete the commit ID.
   git revert <Commit-ID>
======================================  
git reset : To move the files back to previous stages.

git reset HEAD fname ---> staging to Workspace

git reset --soft cid (n-1)  ----> Localrepo to Staging

git reset --mixed cid (n-1) ----> Localrepo to Workspace 

Note: once you move the files from local repo to workspace, the commit ID will also be deleted. you cannot revert it back.
"git revert" works on commit IDs and "git reset" works on files.
=============================
git tag: To add labels to your commits. Like at a particular commit, a new feature is developed. You can tag that commit. The tags can be downloaded.
That means the code that is part of that commit ID can be re used.

git tag <t.name> 
git checkout <t.name> 

git tag -d <tag.name> 

git push origin <tag.name>
git push origin -d <tag.name> 

git checkout refs/tags/v1.0

=============================================

git merge  vs git rebase 

git rebase: Reapplies commits from one branch onto another, creating a linear history by rewriting commit history. This makes the history cleaner but alters commit hashes.

git merge: Combines the changes from two branches without altering commit history. It creates a merge commit, preserving the history of both branches.

================================================

git pull --rebase 

======================
git pull vs git fetch

git pull --> git fetch + git merge origin
git fetch --> fetches code from remote repo to the origin

git pull --rebase --> it won't create any merge commit
git pull --> creates merge commit ID


=========================
git stash: when you are working on a code and it is in staging and not yet committed. But you want to move to other branch without discarding this code.
In such times, you can use git stash. It basically stores the code in a temporary memory.

git stash list
git stash save "label"

git stash show stash@{x}

POP, APPLY, DROP
-----------------
POP - cut
git stash pop
----

APPLY  - copy

git stash apply
------

DROP  - delete

git stash drop
--------------------------
.git/refs/stash

=========
.gitignore : If you want any files not to follow git lifecycle or if you don't want the files to be managed by git, then create a file with name ".gitignore" and add the file names which you want to ignore.

> generally it is used ignore the log files 


============================

vcs // scm 


Centralized Version Control Systems (CVCS) --> svn 
VS
Distributed Version Control Systems (DVCS) --> git 

============================
git branching strategy in your project ? release, feature branches, main branch etc

REALTIME OPEN SOURCE PROJECT 
-----
upstream 
git fork -> for the open source project git repos, you cannot directly contribute to code changes since you are not the collaborator. Then you can fork the complete repo to your local repo and work on it and then raise pull requests to merge your code. 
git clean -> to discard the files in the working and staging area. 
=======================
> To rename a branch:  git branch -m <old_name> <new_name>
> To fetch a remote repo and then checkout to that branch: To verify before merging
   git fetch origin <branch_name>
   git checkout <branch_name>
> What does "git rm" does --> deletes all files in working directory and the staging area
> How to check which branches are merged into main: git branch --merged
> How to change the remote URL: git remote set-url origin <new_remote_repo_url>
> What is fast forward merge: If the merge happens automatically. It won't create any merge commit ID in this case.
> What are different types of tags:
  Annotated tag:
   > Will have a tag, tagger name, email, date and commit hash
   > Good for releases and official versioning.
      git tag -a <tag_name> -m "message"
  Lightweight tag:
   > Just a pointer to the commit (similar to the branch)
   > No metadata. Useful for temporary bookmarks.
> What is detached head state: If the head pointer points to a commit, tag or remote branch instead of local branch. In such cases, you cannot make any commits. You need to add the commits to a new branch with "git checkout -b <branch_name>"
> How to lock a branch in github: by adding branch protection rules.
> How to push your code in your local system to remote repo without cloning:
   git init
   git add .
   git commit -m "message"
   git add remote origin <url>
   git push -u origin <branch_name>
> Difference between GitHub and Bitbucket.
   Both are web based repository hosting servcies.
   GitHub: developed by Microsoft
   BitBucket: by Atlassian
> How to change the remote repostory URL:
   To get the current remote repo: git remote -v
   To change the remote repo: git remote set-url origin <new_repo_url>
   
