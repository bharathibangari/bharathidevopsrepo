
git init ---> To initialize empty local repository

To provide your details:

git config --global user.name "bharathi"
git config --global user.email "bharathi@gmail.com"

In git, the code/file is moved in 3 stages:
1. workspace
2. staging/indexing
3. local repo

> By default all the files will be in workspace as untracked files.
> To check the status:
  git status

> To move the code to staging:
  git add <filename> (or) git add .
 
> To move the code to local repo:
  git commit -m "commit message" <filename> (or) git commit -m "commit message" 
      
> To get the logs or commit ID:
  git log

> To know what changes performed within a commit:
  git show <commit-ID>

> Sometimes when you try to push to remote repo, you get error saying "the remote has the data which is not present locally". It means that there might some other commits or push happened to the remote repo in the meantime. In such case, you can use:
  git pull --rebase

Branches:
> Branch is nothing but copy of data. As the name suggests, it will be a copy of data in the repository.

> By default, the default branch in local repo is "master" and the default branch in the remote or github repo is "main".

> Why we need branches?
  To isolate the data and secure the data. In general, the main branch will have production critical application code. It is not allowed to work or make changes to the main code since it might cause issue to the critical application code. Hence, we create branches in git. Also, different teams working on different fetaures or tasks. So, we maintain multiple feature branches. Once the feature branches are tested, these will be merged into main branch.

> Different types of branches are:
  Main branch
  Release branch
  Feature branch
  Hot fix branch

> To get the list of branches: git branch
> To create a new branch: git branch <br.name>  --> it will copy all the data from the current branch to the newly created branch.
> To move to a branch: git checkout <br.name>
> To create and checkout to a branch: git checkout -b <br.name>
> To merge 2 branches: git merge <br.name>  --> it will merge 2 branches. The content from the other branch will be copied to the current branch.
> To remove a branch: git branch -d <br.name>
> when you try to delete a branch before merging, it throws error. To delete the branches forcefully: 
   git brnach -D <br.name>
> To push a branch to the remote repo: 
   git push <git url> <br.name> (or) git push origin <br.name>.
   
   Here origin will point to the remote repo.

> To delete a branch in the remote repo:
   git push origin -d <br.name>
> Suppose you created a file in test branch but you have not moved the file to staging and you did checkout to other branch and changed the file contents and now when you commit the file, the file will be present in the current branch where you commit, but not in the branch where it was created.
> Generally merge happens automatically without any issues. But, When there are commits happening parallely in 2 different branches and now when you try merge these 2 branches, it will create a merge commit ID. It will open a editor and you need to provide a reason why you want to merge these 2 branches.
Merge conflict: 
when you try to merge 2 branches which have a file with same name but the contents are different. git is not sure which data to be committed.
In such situation, developers should discuss and finalize the code and commit it.

Git cherry-pick:
> Generally, git tracks the info on the commit IDs. Insted of merging 2 branches, if you want to merge a specific commit ID to your branch, use "git cherry-pick"
   git cherry-pick <commit_ID>
> when you clone a remote repository:
  To get the main branch: git branch
  To get remote branch: git branch -r
  To get all branches: git branch -a
> Sometimes, when the branch name and the file/folder name are same, the "git checkout" command throws error. Then use:
   git checkout <br.name> --
Pull request:
  Merge request and pull request are same. If the merge is done locally, its called merge request. When you merge in remote repo or in github, then its called pull request.
  In real time, you cannot merge 2 branches easily. You need to create a pull request and provide the description why you want to merge (like is it for a bug fix or enhancement) and then you need to add reviewers. Once it is approved you can merge. After the merge, you can also delete the branch if you do not require anymore.
git fork:
  In the open source git repos (like jenkins, k8s etc), you cannot directly make changes since you are not a contributor (do not have collaborator access to the repo) to the repo. Instead you can fork the complete repo (all branches or only main branch) and you can make your changes locally in your github forked repo. Then, you can create a pull request to merge 2 branches.

Filtering:
  To get the logs/ commit IDs:
    FILTERING:
      git log -n --> to get a particular number of commits.
      git log --oneline
      git log --oneline -n 
      git log --author kiran
      git log --since "06-03-2025"  --> date format "MM-DD-YYYY"

> To get all the globally set variables:
    git config --list
> To set global variables: git config --global user.name "name"

Alias 
-----
git status  ---> git s 


git config --global alias.s "status"
git config --global alias.s "status"
git s

git log
git config --global alias.l "log"
git l


git log --oneline
git config --global alias.lo "log --oneline"
git lO
 
======
git config --global --unset alias.s

==============================

amend
-----
git commit --amend -m "label" -m "label2" -m "label3"

====================================
========================
git config --list 

========================

============================

amend
-----
git commit --amend -m "label" -m "label2" -m "label3"

====================================
only for modified files :

git commit -am "messgae"

=======================================

revert
------

======================================  
git reset :

git reset HEAD fname ---> staging to WS 

git reset --soft cid (n-1)  ----> LR to Staging

git reset --mixed cid (n-1) ----> LR to Workspace 


=============================
git tag

git tag <t.name> 
git checkout <t.name> 

git tag -d <tag.name> 

git push origin <tag.name>
git push origin -d <tag.name> 
==========================

TAG :

git tag 

git tag <tag.name>
git checkout <tag.name>

git push origin <t.name>

git tag -d <t.name>

git push origin -d  <t.name>

================================================
git checkout refs/tags/v1.0

=============================================

git merge  vs git rebase 

git rebase: Reapplies commits from one branch onto another, creating a linear history by rewriting commit history. This makes the history cleaner but alters commit hashes.

git merge: Combines the changes from two branches without altering commit history. It creates a merge commit, preserving the history of both branches.

================================================

git pull --rebase 

======================
git pull vs git fetch 

========================

git pull --> git fetch + git merge origin


git pull --rebase


=========================

git stash list
git stash save "label"

git stash show stash@{x}

POP, APPLY, DROP
-----------------
POP - cut
----
git stash pop


APPLY  - copy
------
git stash apply


DROP  - delete
-----
git stash drop

--------------------------
.git/refs/stash

=========
.gitignore 

log files 


============================

vcs // scm 


Centralized Version Control Systems (CVCS) --> svn 
VS
Distributed Version Control Systems (DVCS) --> git 

============================
git branching strategy in your project ?

REALTIME OPEN SOURCE PROJECT 
-----
upstream 
git fork 
git 
git clean 
=======================
